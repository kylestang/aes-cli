#include <catch2/catch_test_macros.hpp>
#include <crypto/key.hpp>
#include <crypto/tables.hpp>

TEST_CASE("Create 128 bit key") {
    std::vector<uint8_t> key_bytes = {1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1};
    crypto::AesKey key(key_bytes);

    REQUIRE(key.get_key_size() == crypto::AesKey::KeySize::k_128);
    REQUIRE(key.get_rounds() == 10);
    REQUIRE(key.get_key().size() == 176);

    std::vector<uint8_t> expected = {
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x7c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7c, 0x7c, 0x7c,
        0x7c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7c, 0x7c, 0x7c, 0x6e, 0x6d, 0x6d, 0x82,
        0x13, 0x11, 0x11, 0xfe, 0x6f, 0x6c, 0x6c, 0x83, 0x12, 0x10, 0x10, 0xff,
        0xa0, 0xa7, 0x7b, 0x4b, 0xb3, 0xb6, 0x6a, 0xb5, 0xdc, 0xda, 0x06, 0x36,
        0xce, 0xca, 0x16, 0xc9, 0xdc, 0xe0, 0xa6, 0xc0, 0x6f, 0x56, 0xcc, 0x75,
        0xb3, 0x8c, 0xca, 0x43, 0x7d, 0x46, 0xdc, 0x8a, 0x96, 0x66, 0xd8, 0x3f,
        0xf9, 0x30, 0x14, 0x4a, 0x4a, 0xbc, 0xde, 0x09, 0x37, 0xfa, 0x02, 0x83,
        0x9b, 0x11, 0x34, 0xa5, 0x62, 0x21, 0x20, 0xef, 0x28, 0x9d, 0xfe, 0xe6,
        0x1f, 0x67, 0xfc, 0x65, 0x5e, 0xa1, 0x79, 0x65, 0x3c, 0x80, 0x59, 0x8a,
        0x14, 0x1d, 0xa7, 0x6c, 0x0b, 0x7a, 0x5b, 0x09, 0x04, 0x98, 0x78, 0x4e,
        0x38, 0x18, 0x21, 0xc4, 0x2c, 0x05, 0x86, 0xa8, 0x27, 0x7f, 0xdd, 0xa1,
        0xcd, 0x59, 0x4a, 0x82, 0xf5, 0x41, 0x6b, 0x46, 0xd9, 0x44, 0xed, 0xee,
        0xfe, 0x3b, 0x30, 0x4f, 0x19, 0x5d, 0xce, 0x39, 0xec, 0x1c, 0xa5, 0x7f,
        0x35, 0x58, 0x48, 0x91, 0xcb, 0x63, 0x78, 0xde,
    };

    REQUIRE(expected == key.get_key());
}

TEST_CASE("Create 192 bit key") {
    std::vector<uint8_t> key_bytes = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};
    crypto::AesKey key(key_bytes);

    REQUIRE(key.get_key_size() == crypto::AesKey::KeySize::k_192);
    REQUIRE(key.get_rounds() == 12);
    REQUIRE(key.get_key().size() == 208);

    std::vector<uint8_t> expected = {
        0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,
        0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,
        0x74, 0x75, 0x75, 0x75, 0x76, 0x77, 0x77, 0x77, 0x74, 0x75, 0x75, 0x75,
        0x76, 0x77, 0x77, 0x77, 0x74, 0x75, 0x75, 0x75, 0x76, 0x77, 0x77, 0x77,
        0x83, 0x80, 0x80, 0x4d, 0xf5, 0xf7, 0xf7, 0x3a, 0x81, 0x82, 0x82, 0x4f,
        0xf7, 0xf5, 0xf5, 0x38, 0x83, 0x80, 0x80, 0x4d, 0xf5, 0xf7, 0xf7, 0x3a,
        0xef, 0xe8, 0x0,  0xab, 0x1a, 0x1f, 0xf7, 0x91, 0x9b, 0x9d, 0x75, 0xde,
        0x6c, 0x68, 0x80, 0xe6, 0xef, 0xe8, 0x0,  0xab, 0x1a, 0x1f, 0xf7, 0x91,
        0x27, 0x80, 0x81, 0x9,  0x3d, 0x9f, 0x76, 0x98, 0xa6, 0x2,  0x3,  0x46,
        0xca, 0x6a, 0x83, 0xa0, 0x25, 0x82, 0x83, 0xb,  0x3f, 0x9d, 0x74, 0x9a,
        0x69, 0x12, 0x39, 0x7c, 0x54, 0x8d, 0x4f, 0xe4, 0xf2, 0x8f, 0x4c, 0xa2,
        0x38, 0xe5, 0xcf, 0x2,  0x1d, 0x67, 0x4c, 0x9,  0x22, 0xfa, 0x38, 0x93,
        0x64, 0x15, 0xe5, 0xef, 0x30, 0x98, 0xaa, 0xb,  0xc2, 0x17, 0xe6, 0xa9,
        0xfa, 0xf2, 0x29, 0xab, 0xe7, 0x95, 0x65, 0xa2, 0xc5, 0x6f, 0x5d, 0x31,
        0x8c, 0x59, 0x22, 0x49, 0xbc, 0xc1, 0x88, 0x42, 0x7e, 0xd6, 0x6e, 0xeb,
        0x84, 0x24, 0x47, 0x40, 0x63, 0xb1, 0x22, 0xe2, 0xa6, 0xde, 0x7f, 0xd3,
        0x11, 0x8b, 0x44, 0x6d, 0xad, 0x4a, 0xcc, 0x2f, 0xd3, 0x9c, 0xa2, 0xc4,
        0x57, 0xb8, 0xe5, 0x84,
    };

    REQUIRE(expected == key.get_key());
}

TEST_CASE("Create 256 bit key") {
    std::vector<uint8_t> key_bytes = {
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    };
    crypto::AesKey key(key_bytes);

    REQUIRE(key.get_key_size() == crypto::AesKey::KeySize::k_256);
    REQUIRE(key.get_rounds() == 14);
    REQUIRE(key.get_key().size() == 240);

    std::vector<uint8_t> expected = {
        0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,
        0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,
        0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x3,  0x79, 0x78, 0x78, 0x78,
        0x7a, 0x7b, 0x7b, 0x7b, 0x79, 0x78, 0x78, 0x78, 0x7a, 0x7b, 0x7b, 0x7b,
        0xd9, 0x22, 0x22, 0x22, 0xda, 0x21, 0x21, 0x21, 0xd9, 0x22, 0x22, 0x22,
        0xda, 0x21, 0x21, 0x21, 0x86, 0x85, 0x85, 0x2f, 0xfc, 0xfe, 0xfe, 0x54,
        0x85, 0x86, 0x86, 0x2c, 0xff, 0xfd, 0xfd, 0x57, 0xcf, 0x76, 0x76, 0x79,
        0x15, 0x57, 0x57, 0x58, 0xcc, 0x75, 0x75, 0x7a, 0x16, 0x54, 0x54, 0x5b,
        0xa2, 0xa5, 0xbc, 0x68, 0x5e, 0x5b, 0x42, 0x3c, 0xdb, 0xdd, 0xc4, 0x10,
        0x24, 0x20, 0x39, 0x47, 0xf9, 0xc1, 0x64, 0xd9, 0xec, 0x96, 0x33, 0x81,
        0x20, 0xe3, 0x46, 0xfb, 0x36, 0xb7, 0x12, 0xa0, 0x3,  0x6c, 0x5c, 0x6d,
        0x5d, 0x37, 0x1e, 0x51, 0x86, 0xea, 0xda, 0x41, 0xa2, 0xca, 0xe3, 0x6,
        0xc3, 0xb5, 0x75, 0xb6, 0x2f, 0x23, 0x46, 0x37, 0xf,  0xc0, 0x0,  0xcc,
        0x39, 0x77, 0x12, 0x6c, 0xe6, 0xa5, 0xc,  0x7f, 0xbb, 0x92, 0x12, 0x2e,
        0x3d, 0x78, 0xc8, 0x6f, 0x9f, 0xb2, 0x2b, 0x69, 0x18, 0x82, 0x84, 0x4f,
        0x37, 0xa1, 0xc2, 0x78, 0x38, 0x61, 0xc2, 0xb4, 0x1,  0x16, 0xd0, 0xd8,
        0x81, 0xd5, 0x6d, 0x3,  0x3a, 0x47, 0x7f, 0x2d, 0x7,  0x3f, 0xb7, 0x42,
        0x98, 0x8d, 0x9c, 0x2b, 0x5e, 0xdf, 0x5a, 0xbe, 0x69, 0x7e, 0x98, 0xc6,
        0x51, 0x1f, 0x5a, 0x72, 0x50, 0x9,  0x8a, 0xaa, 0xc0, 0xab, 0xc1, 0x50,
        0xfa, 0xec, 0xbe, 0x7d, 0xfd, 0xd3, 0x9,  0x3f, 0x65, 0x5e, 0x95, 0x14,
    };

    REQUIRE(expected == key.get_key());
}

TEST_CASE("Invalid key length") {
    std::vector<uint8_t> key_bytes = {1};
    REQUIRE_THROWS(crypto::AesKey(key_bytes));
}
